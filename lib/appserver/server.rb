require 'etc'
require 'yaml'

module Appserver
  class Server < Struct.new(:repo_dir, :monit_conf, :monit_reload, :nginx_conf, :nginx_reload)
    class AlreadyInitializedError < RuntimeError; end
    class NotInitialized < RuntimeError; end

    DEFAULTS = {
      :repo_dir => (Etc.getpwnam('git') rescue {})[:dir],
      :monit_conf => 'monitrc',
      :monit_reload => '/usr/sbin/monit reload',
      :nginx_conf => 'nginx.conf',
      :nginx_reload => '/usr/sbin/nginx -s reload',
    }

    attr_reader :dir

    def initialize (dir, options = {})
      super()
      # Set dir first, since it's needed for loading the config file
      @dir = dir
      @settings = options.symbolize_keys!
      # Load config file if exist
      if dir_initialized?
        config = (YAML.load_file(config_file) || {}).symbolize_keys!
        @settings = config.merge(@settings)
      end
      # @settings contains config file options overridden by command line options
      members.each do |key|
        self[key] = @settings[key] || DEFAULTS[key]
      end
    end

    def config_file
      File.join(dir, 'appserver.yml')
    end

    def config_file_template
      File.expand_path('../appserver.yml', __FILE__)
    end

    def dir_initialized?
      File.exist?(config_file)
    end

    def initialize_dir
      raise AlreadyInitializedError if dir_initialized?
      File.safe_replace(config_file) do |f|
        f.puts File.read(config_file_template)
      end
    end

    def apps
      @apps ||= begin
        app_dirs ||= Dir.glob(File.join(dir, '*')).select { |f| File.directory?(f) }.map { |f| File.basename(f) }
        app_dirs.map do |name|
          App.new(self, name, @settings)
        end
      end
    end

    def app (name)
      (@apps || []).find { |app| app.name == name } || App.new(self, name, @settings)
    end

    def write_configs
      raise NotInitialized unless dir_initialized?
      # Write Monit configuration file
      File.safe_replace(monit_conf) do |f|
        f.puts %Q(# Monit configuration automagically generated by the "appserver" gem using)
        f.puts %Q(# the server directory config #{config_file})
        f.puts %Q(# Include this file into your system's monitrc (using an include statement))
        f.puts %Q(# to use it. See http://github.com/zargony/appserver for details.)
        # Let Monit reload itself if this configuration changes
        f.puts %Q(check file monit_conf with path #{File.expand_path(monit_conf)})
        f.puts %Q(  if changed checksum then exec "#{monit_reload}")
        # Reload Nginx if its configuration changes
        f.puts %Q(check file nginx_conf with path #{File.expand_path(nginx_conf)})
        f.puts %Q(  if changed checksum then exec "#{nginx_reload}")
        # Add application-specific Monit configuration
        apps.each do |app|
          app.write_monit_config(f)
        end
      end
      # Write Nginx configuration file
      File.safe_replace(nginx_conf) do |f|
        f.puts %Q(# Nginx configuration automagically generated by the "appserver" gem using)
        f.puts %Q(# the server directory config #{config_file})
        f.puts %Q(# Include this file into your system's nginx.conf \(using an include statement)
        f.puts %Q(# inside a http statement\) to use it. See http://github.com/zargony/appserver)
        f.puts %Q(# for details.)
        # The default server always responds with 403 Forbidden
        f.puts %Q(server {)
        f.puts %Q(  listen 80 default;)
        f.puts %Q(  server_name _;)
        f.puts %Q(  deny all;)
        f.puts %Q(})
        # Add application-specific Nginx configuration
        apps.each do |app|
          app.write_nginx_config(f)
        end
      end
    end
  end
end
