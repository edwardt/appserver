require 'fileutils'
require 'yaml'

module Appserver
  class AlreadyInitializedError < RuntimeError; end
  class DirectoryNotEmptyError < RuntimeError; end
  class NotInitializedError < RuntimeError; end

  class ServerDir < Struct.new(:path, :monit_conf, :monit_reload, :nginx_conf, :nginx_reload, :nginx_reopen, :logrotate_conf)
    include Utils

    CONFIG_FILE_NAME = 'appserver.yml'

    DEFAULTS = {
      :monit_conf => 'monitrc',
      :monit_reload => '/usr/sbin/monit reload',
      :nginx_conf => 'nginx.conf',
      :nginx_reload => '/usr/sbin/nginx -s reload',
      :nginx_reopen => '/usr/sbin/nginx -s reopen',
      :logrotate_conf => 'logrotate.conf',
    }

    def self.config_file_template
      File.expand_path("../#{CONFIG_FILE_NAME}", __FILE__)
    end

    def self.discover (path = '.', options = {})
      if File.exist?(File.join(path, CONFIG_FILE_NAME))
        new(path, options)
      elsif path != '/'
        discover(File.expand_path('..', path), options)
      else
        nil
      end
    end

    def self.init (path, options = {})
      raise AlreadyInitializedError if discover(path) && !options[:force]
      FileUtils.mkdir_p path
      Dir.chdir(path) do
        raise DirectoryNotEmptyError if Dir.glob('*') != [] && !options[:force]
        FileUtils.cp config_file_template, CONFIG_FILE_NAME
        FileUtils.mkdir_p ['apps', 'tmp', 'log']
      end
      new(path, options)
    end

    def initialize (path, options = {})
      self.path = File.expand_path(path)
      # Load configuration settings
      @config = File.exist?(config_file) ? symbolize_keys(YAML.load_file(config_file) || {}) : {}
      DEFAULTS.each do |key, default_value|
        self[key] = @config[key] || default_value
      end
    end

    def config_file
      File.join(path, CONFIG_FILE_NAME)
    end

    def apps_path
      File.join(path, 'apps')
    end

    def tmp_path
      File.join(path, 'tmp')
    end

    def log_path
      File.join(path, 'log')
    end

    def app (name)
      @apps ||= {}
      @apps[name] ||= App.new(self, name, @config)
    end

    def apps
      Dir.glob(File.join(apps_path, '*')).
        select { |f| File.directory?(f) }.
        map { |f| File.basename(f) }.
        reject { |f| f =~ /\.(tmp|old|new)$/ }.
        map { |name| app(name) }.
        select { |app| app.startable? }
    end

    def repository (path)
      @repositories ||= {}
      @repositories[File.expand_path(path, self.path)] ||= Repository.new(self, path, @config)
    end

    def write_configs
      # Write Monit configuration snippet
      safe_replace_file(monit_conf) do |f|
        f.puts %Q(# Monit configuration automagically generated by the "appserver" gem using)
        f.puts %Q(# the appserver directory config #{config_file})
        f.puts %Q(# Include this file into your system's monitrc \(using an include statement\))
        f.puts %Q(# to use it. See http://github.com/zargony/appserver for details.)
        # Let Monit reload itself if this configuration changes
        f.puts %Q(check file monit_conf with path #{monit_conf})
        f.puts %Q(  if changed checksum then exec "#{monit_reload}")
        # Reload Nginx if its configuration changes
        f.puts %Q(check file nginx_conf with path #{nginx_conf})
        f.puts %Q(  if changed checksum then exec "#{nginx_reload}")
        # Add application-specific Monit configuration
        apps.each do |app|
          app.write_monit_config(f)
        end
      end
      # Write Nginx configuration snippet
      safe_replace_file(nginx_conf) do |f|
        f.puts %Q(# Nginx configuration automagically generated by the "appserver" gem using)
        f.puts %Q(# the appserver directory config #{config_file})
        f.puts %Q(# Include this file into your system's nginx.conf \(using an include statement)
        f.puts %Q(# inside a http statement\) to use it. See http://github.com/zargony/appserver)
        f.puts %Q(# for details.)
        # The default server always responds with 403 Forbidden
        f.puts %Q(server {)
        f.puts %Q(  listen 80 default;)
        f.puts %Q(  server_name _;)
        f.puts %Q(  deny all;)
        f.puts %Q(})
        # Add application-specific Nginx configuration
        apps.each do |app|
          app.write_nginx_config(f)
        end
      end
      # Write Logrotate configuration snippet
      safe_replace_file(logrotate_conf) do |f|
        f.puts %Q(# Logrotate configuration automagically generated by the "appserver" gem using)
        f.puts %Q(# the appserver directory config #{config_file})
        f.puts %Q(# Include this file into your system's logrotate.conf \(using an include statement\))
        f.puts %Q(# to use it. See http://github.com/zargony/appserver for details.)
        # Handle access logs of Nginx in one statement, so Nginx only needs to reopen once
        access_logs = apps.map { |app| app.access_log }
        f.puts "#{access_logs.join(' ')} {"
        f.puts "  missingok"
        f.puts "  delaycompress"
        f.puts "  sharedscripts"
        f.puts "  postrotate"
        f.puts "    #{nginx_reopen}"
        f.puts "  endscript"
        f.puts "}"
        # Add application-specific Logrotate configuration
        apps.each do |app|
          app.write_logrotate_config(f)
        end
      end
    end
  end
end
