module Appserver
  class Nginx < Struct.new(:server_dir)

    def self.write_config (server_dir)
      new(server_dir).write_config
    end

    def initialize (server_dir)
      self.server_dir = server_dir
    end

    def write_config
      Utils.safe_replace_file(server_dir.nginx_conf) do |f|
        f.puts "# Nginx configuration automagically generated by the \"appserver\" gem using"
        f.puts "# the appserver directory config #{server_dir.config_file}"
        f.puts "# Include this file into your system's nginx.conf (using an include statement"
        f.puts "# inside a http statement) to use it. See http://github.com/zargony/appserver"
        f.puts "# for details."
        # The default server always responds with 403 Forbidden
        f.puts "server {"
        f.puts "  listen 80 default;"
        f.puts "  server_name _;"
        f.puts "  deny all;"
        f.puts "}"
        # Add application-specific Nginx configuration
        server_dir.apps.each do |app|
          f.puts ""
          f.puts "# Application: #{app.name}"
          if app.socket
            f.puts "upstream #{app.name} {"
            f.puts "  server unix:#{app.socket} fail_timeout=0;"
            f.puts "}"
            write_server_definition(f, app)
            write_server_definition(f, app, true) if app.ssl?
          end
        end
      end
    end

  protected

    def write_server_definition (f, app, ssl = false)
      f.puts "server {"
      f.puts "  listen #{ssl ? 443 : 80};"
      f.puts "  server_name #{app.hostname};"
      write_config_for_ssl(ssl, f, app)
      f.puts "  access_log #{app.access_log};"
      if ssl 
            f.puts "     location /{"
            f.puts "        rewrite ^ https://#{app:targethostname}:#{app:targetport}/$request_uri;"
            f.puts "     }"
      else 
            f.puts "  location /{"
            f.puts "    rewrite ^ http://#{app:targethostname}:#{app:targetport}/$request_uri;"
            f.puts "  }"
            f.puts "}"
      end

private 
    
    def write_config_for_ssl (ssl, f, app)
      if ssl
        f.puts "  ssl on;"
        f.puts "  ssl_certificate #{app.ssl_cert};"
        f.puts "  ssl_certificate_key #{app.ssl_key};"
        f.puts "  ssl_session_timeout 5m;"
        f.puts "  ssl_protocols SSLv2 SSLv3 TLSv1;"
        f.puts "  ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;"
        f.puts "  ssl_prefer_server_ciphers on;"
      end
    end
    
  
    
  end
  
  private
  
end
