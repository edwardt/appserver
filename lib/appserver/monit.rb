module Appserver
  class Monit < Struct.new(:server_dir)

    def self.write_config (server_dir)
      new(server_dir).write_config
    end

    def initialize (server_dir)
      self.server_dir = server_dir
    end

    def write_config
      Utils.safe_replace_file(server_dir.monit_conf) do |f|
        f.puts "# Monit configuration automagically generated by the \"appserver\" gem using"
        f.puts "# the appserver directory config #{server_dir.config_file}"
        f.puts "# Include this file into your system's monitrc (using an include statement)"
        f.puts "# to use it. See http://github.com/zargony/appserver for details."
        # Let Monit reload itself if this configuration changes
        f.puts "check file monit_conf with path #{server_dir.monit_conf}"
        f.puts "  if changed checksum then exec \"#{server_dir.monit_reload}\""
        # Reload Nginx if its configuration changes
        f.puts "check file nginx_conf with path #{server_dir.nginx_conf}"
        f.puts "  if changed checksum then exec \"#{server_dir.nginx_reload}\""
        # Add application-specific Monit configuration
        server_dir.apps.each do |app|
          f.puts ""
          f.puts "# Application: #{app.name}"
          if app.pid_file && app.start_server?
            cyclecheck = app.usage_check_cycles ? " for #{app.usage_check_cycles} cycles" : ''
            f.puts "check process #{app.name} with pidfile #{app.pid_file}"
            f.puts "  start program = \"#{server_dir.appserver_cmd('start', app.name)}\""
            f.puts "  stop program = \"#{server_dir.appserver_cmd('stop', app.name)}\""
            f.puts "  if totalcpu usage > #{app.max_cpu_usage}#{cyclecheck} then restart" if app.max_cpu_usage
            f.puts "  if totalmemory usage > #{app.max_memory_usage}#{cyclecheck} then restart" if app.max_memory_usage
            f.puts "  if failed unixsocket #{app.socket} protocol http request \"/\" timeout #{app.http_check_timeout} seconds then restart" if app.http_check_timeout
            f.puts "  if 5 restarts within 5 cycles then timeout"
            f.puts "  group appserver"
            f.puts "check file #{app.name}_revision with path #{app.revision_file}"
            f.puts "  if changed checksum then exec \"#{server_dir.appserver_cmd('restart', app.name)}\""
          end
        end
      end
    end
  end
end
